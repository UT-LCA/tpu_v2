

module vdispatcher_add_2_7 (
    clk,
    resetn,

    load,
    shift,
    rotate,       // Sets whether ends feedback into beginning
    increment,
    squash,

    add_sub,
    valuetoadd,

    inshift_data,

    inparallel_data,
    outparallel_data

    );


input clk;
input resetn;

input  load;
input  shift;
input  rotate;
input [ 2-1:0 ]  increment;
input [ 2-1:0 ]  squash;

input               add_sub;
input [ 7-1:0 ] valuetoadd;

input [ 7-1:0 ] inshift_data;

input [ 2*7-1:0 ]  inparallel_data;
output [ 2*7-1:0 ] outparallel_data;

wire [ 7-1:0 ]  shiftin_right;

reg [ 2*7-1:0 ] outparallel_data;
reg [ 2*7-1:0 ] outparallel_added;


  assign shiftin_right = (!rotate) ? inshift_data : 
                    outparallel_added[2*7-1:(2-1)*7];

  reg [ 7-1:0 ] v;
  reg[31:0] i;
  always@*
    for (i=0; i<2; i=i+1)
    begin
      //Saturate at 0xffff... in either direction
      v=(increment[i] && outparallel_data[i*7 +: 7] != {7{1'b1}}) ?
        valuetoadd : 0;
      if (add_sub==0)
        outparallel_added[i*7 +: 7]=outparallel_data[i*7+:7] + v;
      else
        outparallel_added[i*7 +: 7]=outparallel_data[i*7+:7] - v;
    end

  always@(posedge clk)
    if (!resetn)
      outparallel_data=0;
    else if (load)
      outparallel_data=inparallel_data;
    else if (shift)
      outparallel_data=(outparallel_added<<7) | shiftin_right;
      


endmodule

